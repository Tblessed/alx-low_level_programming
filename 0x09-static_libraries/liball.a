!<arch>
0-isupper.c/    0           0     0     644     258       `
#include "main.h"

/**
 * _isupper - checks if parameter is an uppercase character.
 * @c: input character.
 * Return: 1 if is an uppercase character, 0 in other case.
 */

int _isupper(int c)
{
if (c >= 65 && c <= 90)
{
return (1);
}
else
{
return (0);
}
}
0-memset.c/     0           0     0     644     569       `
#include "main.h"

/**
 * _memset - a function that fills memory with a constant byte
 * @s: a char pointer given by main
 * @b: a constant byte
 * @n: how many byte of memory
 * Return: pointer to the memory s
 */

char *_memset(char *s, char b, unsigned int n)
{
int night = 0; /*Night is my variable and was assigned 0*/
while (n > 0) /*as long as n is less than zero*/
{
s[night] = b; /*Night is assigned to our char*/
night++; /*post-increment, value first incremented afterwards*/
n--; /*post-decrement*/
}
return (s); /*returning pointer to the memory of s*/
}


0-strcat.c/     0           0     0     644     357       `
#include "main.h"
#include <stdio.h>

/**
*_strcat - concatenates two strings
* @dest: string to append to
* @src: string to add
* Return: a pointer to the resulting string
*/

char *_strcat(char *dest, char *src)
{
int i, j;
i = 0;
j = 0;
while (dest[i] != '\0')
i++;
while (src[j] != '\0')
{
dest[i] = src[j];
j++;
i++;
}
dest[i] = '\0';
return (dest);
}

100-atoi.c/     0           0     0     644     526       `
#include "main.h"

/**
* _atoi - converts a string to an integer
* @s: string to be converted
* Return: the int converted from the string
*/

int _atoi(char *s)
{
int i, d, n, len, f, digit;
i = 0;
d = 0;
n = 0;
len = 0;
f = 0;
digit = 0;
while (s[len] != '\0')
len++;
while (i < len && f == 0)
{
if (s[i] == '-')
++d;
if (s[i] >= '0' && s[i] <= '9')
{
digit = s[i] - '0';
if (d % 2)
digit = -digit;
n = n * 10 + digit;
f = 1;
if (s[i + 1] < '0' || s[i + 1] > '9')
break;
f = 0;
}
i++;
}
if (f == 0)
return (0);
return (n);
}
1-isdigit.c/    0           0     0     644     178       `
#include "main.h"

/**
 * _isdigit - checks for digits
 * @c: parameter
 * Return: 0 or 1
*/

int _isdigit(int c)
{
if (c >= 48 && c < 58)
{
return (1);
}
else
{
return (0);
}
}
1-memcpy.c/     0           0     0     644     394       `
#include "main.h"

/**
 * _memcpy - like memset but a function that copies memory area
 * @dest: destination for our memory
 * @src: source to copy from
 * @n: number of characters to copy
* Return: pointer back to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
int night = 0; /*same code as memset*/
while (n > 0)
{
dest[night] = src[night];
night++;
n--;
}
return (dest);
}
1-strncat.c/    0           0     0     644     432       `
#include "main.h"

/**
 * _strncat - concatenates n bytes from a string to another
 * @dest: destination string
 * @src: source string
 * @n: number of bytes of str to concatenate
 * Return: a pointer to the resulting string dest
 */

char *_strncat(char *dest, char *src, int n)
{
int i, j;
i = 0;
j = 0;
while (dest[i] != '\0')
i++;
while (src[j] != '\0' && j < n)
{
dest[i] = src[j];
i++;
j++;
}
dest[i] = '\0';
return (dest);
}
2-strchr.c/     0           0     0     644     542       `
#include "main.h"

/**
*_strchr - searches for the first occurrence of the character c
    *@s: this is the string to be scanned
     *@c: this is the character to be searched in s
      *Return: 0
    */
char *_strchr(char *s, char c)
{
int night = 0;/*Night was assigned 0*/
while (s[night] != 0) /*if s is not equal to 0*/
{
if (s[night] == c)/*if s[night] is  equal or not to c*/
return (s + night); /*return value if ture*/
night++;
}
if (c == 0) /* if c is equal or not to 0*/
return (s + night); /*return value if true*/
return (0);
}
2-strlen.c/     0           0     0     644     126       `
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

int _strlen(char *s)
{
    return strlen(s);
}
2-strncpy.c/    0           0     0     644     360       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: destination string
 * @src: source string
 * @n: number of bytes to copy
 * Return: pointer to the resulting string
 */

char *_strncpy(char *dest, char *src, int n)
{
int i;
i = 0;
while (src[i] != '\0' && i < n)
{
dest[i] = src[i];
i++;
}
while (i < n)
{
dest[i] = '\0';
i++;
}
return (dest);
}
3-islower.c/    0           0     0     644     240       `
#include "main.h"

/**
 * _islower - check if a char is lowercase
 * @c: is the char to be checked
 * Return: 1 if the char is lowercase. otherwise 0
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     206       `
#include "main.h"

/**
* _puts - prints a string to stdout
* @str: pointer to the string to print
*/

void _puts(char *str)
{
int i;
for (i = 0; str[i] != '\0'; i++)
{
_putchar(str[i]);
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     357       `
#include "main.h"

/**
 * _strcmp - compares two strings
 * @s1: first string to compare
 * @s2: second string to compare
 * Return: less than 0 if s1 is less than s2, 0 if they're equal,
 * more than 0 if s1 is greater than s2
 */

int _strcmp(char *s1, char *s2)
{
while (*s1 == *s2)
{
if (*s1 == '\0')
{
return (0);
}
s1++;
s2++;
}
return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     547       `
#include "main.h"

/**
 * _strspn - Locates a character in a string
 * @s: This is the main C string to be scanned.
* @accept: This is the string containing the list of characters to match in s
  * Return: return count
   */

unsigned int _strspn(char *s, char *accept)
{
int i, j;
int night = 0;
char *str1, *str2;
str1 = s;
str2 = accept;
i = 0;
while (str1[i] != '\0')
{
j = 0;
while (str2[j] != '\0')
{
if (str2[j] == str1[i])
{
night++;
break;
}
j++;
}
if (s[i] != accept[j])
{
break;
}
i++;
}
return (night); /*return the value of night*/
}

4-isalpha.c/    0           0     0     644     293       `
#include "main.h"

/**
 * _isalpha - checks if a char is alphabetic.
 * @c: the char is to be checked.
 * Return: 1 if char is letter, lowercase or uppercase, 0 otherwise.
 */

int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') ||
			(c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     389       `
#include "main.h"

/**
 * _strpbrk - a function that searches a string for any set of bytes
 * @s: a pointer what will be given by main. returned by s
 * @accept: a string given by main
 * Return: a pointer to s
 */

char *_strpbrk(char *s, char *accept)
{
int i;
int j;
for (i = 0; s[i] != 0; i++)
{
for (j = 0; accept[j] != 0; j++)
if (s[i] == accept[j])
return (s + i);
}
return (0);
}

5-strstr.c/     0           0     0     644     577       `
#include "main.h"

/**
 * _strstr - first occurence of the substring needle in the string haystack
   * @haystack: main str to be examined
    * @needle: searched in haystack
    * Return: return 0
   */

char *_strstr(char *haystack, char *needle)
{
char *night1, *night2; /*my variables*/
while (*haystack != '\0')
{
night1 = haystack; /*values*/
night2 = needle;
/*Start haystack loop with variables*/
while (*haystack != '\0' && *night2 != '\0' && *haystack == *night2)
{
haystack++;
night2++;
}
if (*night2 == '\0')
return (night1);
haystack = night1 + 1;
}
return (0);
}

6-abs.c/        0           0     0     644     240       `
#include "main.h"
#include <stdio.h>

/**
 * _abs - value absolute
 * *@n: the int to print
 * Return: always 0.
 */
int _abs(int n)
{
	if (n < 0)
	{
		return (n * (-1));
	}
	else if (n == 0)
	{
		return (0);
	}
	else
	{
		return (n);
	}
}
9-strcpy.c/     0           0     0     644     453       `
#include "main.h"

/**
 *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)
{
int len, i;
len = 0;
while (src[len] != '\0')
{
len++;
}
for (i = 0; i < len; i++)
{
dest[i] = src[i];
}
dest[i] = '\0';
return (dest);
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
_putchar.c/     0           0     0     644     1778      `
#include "main.h"                                                                                                                  
#include <unistd.h>                                                                                                                     
                                                                                                                                        
/**                                                                                                                                     
 * _putchar - writes the character c to stdout                                                                                          
 * @c: The character to print                                                                                                           
 *                                                                                                                                      
 * Return: On success 1.                                                                                                                
 * On error, -1 is returned, and errno is set appropriately.                                                                            
 */                                                                                                                                     
int _putchar(char c)                                                                                                                    
{                                                                                                                                       
        return (write(1, &c, 1));                                                                                                       
}
